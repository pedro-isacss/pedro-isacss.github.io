[ { "title": "Creating a Tic Tac Toe game with Python", "url": "/posts/creating-a-tic-tac-toe-game-with-python/", "categories": "Programming", "tags": "game, python", "date": "2022-12-30 00:33:00 -0300", "snippet": "In this post we are going to create a Tic Tac Toe game using Python. The game will not have a graphical interface, it will be via terminal.ImportsFirst, let’s import two libraries that we will use ...", "content": "In this post we are going to create a Tic Tac Toe game using Python. The game will not have a graphical interface, it will be via terminal.ImportsFirst, let’s import two libraries that we will use to develop the game: random (to generate random numbers) and tabulate (to create tables).The random is already a native Python library, so we can import it directly into code. The tabulate library is not native to Python so we need to run the pip install tabulate command to install it.Now just do the imports as follows:import randomfrom tabulate import tabulatePlay functionOur game will run from a function called play. So now we need to define it and then indicate that the game is starting:def play(): print(\"\") print(\"============ START ============\")Game optionsNow we need to define two variables: options (an array that receives the choice options) and wins (a dictionary that indicates which option wins which)options = [\"rock\", \"paper\", \"scissors\"]wins = { \"rock\": \"scissors\", \"paper\": \"rock\", \"scissors\": \"paper\"}Get players optionsThe next step is to receive the players’ choices (user and CPU) and store them in the variables player and cpu.To receive the user’s choice we will do:print('''Choose your weapon:[0] - {0}[1] - {1}[2] - {2}'''.format(options[0], options[1], options[2])) player = int(input(\"Choose an option: \"))To receive the “choice” from the CPU, we’ll use the random.randint method to generate a random value between 0 and 2, which are the possible indexes of our options array:cpu = random.randint(0, 2)Get resultNow we need to compare the user and CPU choices and store the winner of the match in a result variable. To do this, we will use the if/else condition structure, taking into account that: if user and cpu chose the same option then we don’t have a winner if the user chose a property from the wins dictionary and the CPU chose the value corresponding to that property, then the winner is the user if neither event 1 nor event 2 occurred then the winner is the CPUNow, just turn these conditions into code:result = \"\"if options[player] == options[cpu]: result = \"No winners\"elif wins[options[player]] == options[cpu]: result = \"Player\"else: result = \"CPU\"Show resultsTo show the result of the match, we will use the tabulate method that we imported from the tabulate library. For this, first, we need to create an array whose first item will be an array with the header of our table (Player, CPU and Winner) and the second item will be an array with the table data (user option, CPU option and match winner):resultsTable = [ ['Player', 'CPU', 'Winner'], [options[player], options[cpu], result], ]Finally it is now possible to show the result of the match:print('''=========== RESULTS ==========={0}'''.format(tabulate(resultsTable, headers='firstrow', tablefmt='grid')))Play againTo end our game, we can give the user the option to start a new game. For this we will use the following conditions: if the user types 1, a new game will be started if the user types any other value, the game will be finishedprint('''Play again?[1] - Yes[ANY] - No''')playAgain = input(\"Choose an option: \")if playAgain == \"1\": play()NOTE: the play function is a recursive function, that is, it is a function that calls itself.Starting the gameFinally, call the play function so that the game starts as soon as the file is executed:play()More Suggestion for improvement: handle error when user chooses option greater than 2 and less than 0. Code: https://colab.research.google.com/drive/1dm-ZPAsBdWAfbTIc1lmFWCbOs12ABd0a?usp=sharing" }, { "title": "3 programming sites that I really like", "url": "/posts/3-programming-sites-that-I-really-like/", "categories": "Programming", "tags": "sites, learning", "date": "2022-12-28 00:33:00 -0300", "snippet": "Every programmer has a site collection they love. In this post I will list the 3 programming sites that I like the most.HackerRankThis platform is just perfect for anyone looking to improve their l...", "content": "Every programmer has a site collection they love. In this post I will list the 3 programming sites that I like the most.HackerRankThis platform is just perfect for anyone looking to improve their logic programming skills. It has several challenges ranging from basic to advanced level. In addition, HackerRank has a code editor that allows you to solve challenges in different languages (Python, JavaScript, Java…) without having to leave your browser.Another positive point of the platform is that each challenge has a “discussions” tab where you can discuss with other people and thus, perhaps, arrive at a better solution for the challenge.Access HackerRankCodePenCodePen, in my opinion, is a platform that focuses more on creating art using HTML, CSS and JavaScript. As soon as you access the platform, you will come across creations that will make you think: “How is it possible to do this with just HTML, CSS and JavaScript?”.If you don’t have that artistic sense, CodePen can also be useful for simple things like: creating a first simple version of an idea, storing code to use as an iframe on another site, testing some library or framework (CodePen allows the use of libraries and frameworks through CDN) and more what your imagination allows.Access CodePenSololearnSoloearn is a platform that I use to learn something new or simply remember concepts that I forgot over time. This platform has several courses that are divided into theoretical content in text and practical content in the form of exercises.In addition, Sololearn has a forum where you can interact with other users and a “Code Playground” that allows you to unleash your imagination and easily put into practice the new knowledge obtained.Access Sololearn" }, { "title": "Creating an analog clock with css and javascript", "url": "/posts/creating-an-analog-clock-with-css-and-javascript/", "categories": "Programming", "tags": "html, css, javascript", "date": "2022-03-21 00:33:00 -0300", "snippet": "Hey guys. Some time ago I challenged myself to create an analog clock using html, css and javascript. In this post I will share my line of reasoning to arrive at the resultInitial filesFirst of all...", "content": "Hey guys. Some time ago I challenged myself to create an analog clock using html, css and javascript. In this post I will share my line of reasoning to arrive at the resultInitial filesFirst of all, I created three files: index.html, styles.css and scripts.js.The index.html will contain the skeleton of the analog clock, the styles.css the appearance and the scripts.js is what will make the clock actually tick.index.htmlIn the index.html file I created 16 &lt;canvas&gt;: 12 canvas for the clock strokes, 1 for the hour hand, 1 for the minute hand, 1 for the second hand and 1 more for the dot that joins the pointers.After that, I created a &lt;div&gt; with a &lt;p id=\"digital-clock\"&gt; tag to show the time with numbers.As a result:&lt;main&gt; &lt;canvas class=\"pointer\" id=\"pointer-12\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-1\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-2\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-3\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-4\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-5\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-6\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-7\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-8\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-9\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-10\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"pointer-11\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"point\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"hour\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"minute\"&gt;&lt;/canvas&gt; &lt;canvas class=\"pointer\" id=\"second\"&gt;&lt;/canvas&gt;&lt;/main&gt;&lt;div&gt; &lt;p id=\"digital-clock\"&gt;&lt;/p&gt;&lt;/div&gt;styles.cssFirst I reset some CSS properties:* { margin: 0; padding: 0; box-sizing: border-box;}I defined some properties for the body and main:body{ background-color: #000; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; padding: 24px;}main{ position: relative; background-color: #222; width: 25vw; height: 25vw; min-height: 150px; min-width: 150px; display: flex; justify-content: center; align-items: center; border-radius: 50%; border: 8px solid #eee;}I also defined the general style for the clock strokes using the .pointer class:.pointer{ height: 2%; width: 10%; background-color: #eee; position: absolute;}Once that was done, it was necessary to position each pointer using the rotate and translate properties:#pointer-12{ top: 0; height: 20%; width: 2%;}#pointer-11{ transform: rotate(-120deg) translate(452%)}#pointer-10{ transform: rotate(-150deg) translate(452%)}#pointer-9{ left: 0; height: 2%; width: 20%;}#pointer-8{ transform: rotate(-210deg) translate(452%)}#pointer-7{ transform: rotate(-240deg) translate(452%)}#pointer-6{ bottom: 0; height: 20%; width: 2%;}#pointer-5{ transform: rotate(-300deg) translate(452%)}#pointer-4{ transform: rotate(-330deg) translate(452%)}#pointer-3{ right: 0; height: 2%; width: 20%;}#pointer-2{ transform: rotate(-30deg) translate(452%)}#pointer-1{ transform: rotate(-60deg) translate(452%)}After that, I styled the hands and center point of the clock:#point{ width: 5%; height: 5%; border-radius: 50%; z-index: 100;}#hour{ height: 2%; width: 20%;}#minute{ height: 2%; width: 25%;}#second{ height: 1%; width: 20%;}#digital-clock{ color: #eee; margin-top: 24px; font-size: 24px; font-weight: 800}Finally, I styled the #digital-clock which will show the time digitally:#digital-clock{ color: #eee; margin-top: 24px; font-size: 24px; font-weight: 800}scripts.jsNow that the analog clock is properly structured and styled, just put it to work.Firstly, I created a reference for all the interactive elements of the clock (hour hand, minute hand, second hand and digital clock):const hour = document.getElementById(\"hour\")const second = document.getElementById(\"second\")const minute = document.getElementById(\"minute\")const digital = document.getElementById(\"digital-clock\")Since these elements will be updated every second, I created a setInterval and an instance of the Date object:setInterval(() =&gt; { const date = new Date() // all logic will be here}, 1000)First, I tried to make the hour hand dynamic. For that, I created an if/else that will identify if the hour is less than or equal to 11 and from that move the hour hand through the value of date.getHours():if(date.getHours() &lt;= 11){ hour.style.transform = `rotate(${(date.getHours() - 3) * 30}deg) translate(55%)` } else{ hour.style.transform = `rotate(${(date.getHours() - 3) * 30}deg) translate(55%)`}After that, just move the minute and second hands according to the date.getMinutes() and getSeconds() values:minute.style.transform = `rotate(${(date.getMinutes() - 15) * 6}deg) translate(55%)`second.style.transform = `rotate(${(date.getSeconds() - 15) * 6}deg) translate(55%)`Finally, just update the digital clock:digital.innerHTML = `${date.getHours() &lt; 10 ? \"0\" + date.getHours() : date.getHours()} : ${date.getMinutes() &lt; 10 ? \"0\" + date.getMinutes() : date.getMinutes()} : ${date.getSeconds() &lt; 10 ? \"0\" + date.getSeconds() : date.getSeconds()}`ResultsCode on GitHub: https://github.com/pedro-isacss/analog-clockResult: https://www.pedroisac.dev/analog-clock/" }, { "title": "Useful NPM (v8) commands", "url": "/posts/useful-npm-v8-commands/", "categories": "Programming", "tags": "npm", "date": "2022-02-19 00:33:00 -0300", "snippet": "NPM (Node Package Manager) is an essential tool for anyone developing with JavaScript. So in this post I will list some useful commands when using NPM.Starting a projectWe can start a project by ru...", "content": "NPM (Node Package Manager) is an essential tool for anyone developing with JavaScript. So in this post I will list some useful commands when using NPM.Starting a projectWe can start a project by running npm init.We can also do npm init -y if we want a default package.json.Searching packagesYou can fetch NPM packages in two ways. The first way is by directly accessing the NPM website. The second way is using the NPM CLI:npm search &lt;package&gt;Installing packagesA very important NPM command is install. It allows us to add dependencies to our project.Some use cases:npm install # install the packages specified in package.jsonnpm install package # install a packagenpm install package@4.0.1 # install a specific versionnpm install package@latest # install the latest versionnpm install package -D # install as development dependencynpm install -g package # install package globallyUninstalling packagesWe can uninstall a package using uninstall:npm uninstall packageUpdating packagesWe can update packages using update:npm update // update packagesnpm update package // update a specific packageWe can still list outdated packages by doing:npm outdatedOther useful NPM commandsSome other commands that can be useful when we are working with NPM:npm login # log innpm logout # log outnpm whoami # display logged in usernpm publish # publish a package" } ]
