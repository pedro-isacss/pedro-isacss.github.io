[
  
  {
    "title": "Creating an analog clock with css and javascript",
    "url": "/posts/creating-an-analog-clock-with-css-and-javascript/",
    "categories": "Mini projects",
    "tags": "html, css, javascript, analog clock, mini project",
    "date": "2022-03-21 11:33:00 +0800",
    





    "snippet": "Hey guys. Some time ago I challenged myself to create an analog clock using html, css and javascript. In this post I will share my line of reasoning to arrive at the resultInitial filesFirst of all, I created three files: index.html, styles.css and scripts.js.The index.html will contain the skeleton of the analog clock, the styles.css the appearance and the scripts.js is what will make the clock actually tick.index.htmlIn the index.html file I created 16 &amp;lt;canvas&amp;gt;: 12 canvas for the clock strokes, 1 for the hour hand, 1 for the minute hand, 1 for the second hand and 1 more for the dot that joins the pointers.After that, I created a &amp;lt;div&amp;gt; with a &amp;lt;p id=&quot;digital-clock&quot;&amp;gt; tag to show the time with numbers.As a result:&amp;lt;main&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-12&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-1&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-2&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-3&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-4&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-5&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-6&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-7&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-8&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-9&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-10&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;pointer-11&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;point&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;hour&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;minute&quot;&amp;gt;&amp;lt;/canvas&amp;gt;  &amp;lt;canvas class=&quot;pointer&quot; id=&quot;second&quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/main&amp;gt;&amp;lt;div&amp;gt;  &amp;lt;p id=&quot;digital-clock&quot;&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;styles.cssFirst I reset some CSS properties:* {  margin: 0;  padding: 0;  box-sizing: border-box;}I defined some properties for the body and main:body{  background-color: #000;  display: flex;  flex-direction: column;  justify-content: center;  align-items: center;  height: 100vh;  padding: 24px;}main{  position: relative;  background-color: #222;  width: 25vw;  height: 25vw;  min-height: 150px;  min-width: 150px;  display: flex;  justify-content: center;  align-items: center;  border-radius: 50%;  border: 8px solid #eee;}I also defined the general style for the clock strokes using the .pointer class:.pointer{  height: 2%;  width: 10%;  background-color: #eee;  position: absolute;}Once that was done, it was necessary to position each pointer using the rotate and translate properties:#pointer-12{  top: 0;  height: 20%;  width: 2%;}#pointer-11{  transform: rotate(-120deg) translate(452%)}#pointer-10{  transform: rotate(-150deg) translate(452%)}#pointer-9{  left: 0;  height: 2%;  width: 20%;}#pointer-8{  transform: rotate(-210deg) translate(452%)}#pointer-7{  transform: rotate(-240deg) translate(452%)}#pointer-6{  bottom: 0;  height: 20%;  width: 2%;}#pointer-5{  transform: rotate(-300deg) translate(452%)}#pointer-4{  transform: rotate(-330deg) translate(452%)}#pointer-3{  right: 0;  height: 2%;  width: 20%;}#pointer-2{  transform: rotate(-30deg) translate(452%)}#pointer-1{  transform: rotate(-60deg) translate(452%)}After that, I styled the hands and center point of the clock:#point{  width: 5%;  height: 5%;  border-radius: 50%;  z-index: 100;}#hour{  height: 2%;  width: 20%;}#minute{  height: 2%;  width: 25%;}#second{  height: 1%;  width: 20%;}#digital-clock{  color: #eee;  margin-top: 24px;  font-size: 24px;  font-weight: 800}Finally, I styled the #digital-clock which will show the time digitally:#digital-clock{  color: #eee;  margin-top: 24px;  font-size: 24px;  font-weight: 800}scripts.jsNow that the analog clock is properly structured and styled, just put it to work.Firstly, I created a reference for all the interactive elements of the clock (hour hand, minute hand, second hand and digital clock):const hour = document.getElementById(&quot;hour&quot;)const second = document.getElementById(&quot;second&quot;)const minute = document.getElementById(&quot;minute&quot;)const digital = document.getElementById(&quot;digital-clock&quot;)Since these elements will be updated every second, I created a setInterval and an instance of the Date object:setInterval(() =&amp;gt; {  const date = new Date()  // all logic will be here}, 1000)First, I tried to make the hour hand dynamic. For that, I created an if/else that will identify if the hour is less than or equal to 11 and from that move the hour hand through the value of date.getHours():if(date.getHours() &amp;lt;= 11){  hour.style.transform = `rotate(${(date.getHours() - 3) * 30}deg) translate(55%)` } else{  hour.style.transform = `rotate(${(date.getHours() - 3) * 30}deg) translate(55%)`}After that, just move the minute and second hands according to the date.getMinutes() and getSeconds() values:minute.style.transform = `rotate(${(date.getMinutes() - 15) * 6}deg) translate(55%)`second.style.transform = `rotate(${(date.getSeconds() - 15) * 6}deg) translate(55%)`Finally, just update the digital clock:digital.innerHTML = `${date.getHours() &amp;lt; 10 ? &quot;0&quot; + date.getHours() : date.getHours()} : ${date.getMinutes() &amp;lt; 10 ? &quot;0&quot; + date.getMinutes() : date.getMinutes()} : ${date.getSeconds() &amp;lt; 10 ? &quot;0&quot; + date.getSeconds() : date.getSeconds()}`ResultsCode on GitHub: https://github.com/pedro-isacss/analog-clockResult: https://www.pedroisac.dev/analog-clock/"
  },
  
  {
    "title": "Useful NPM commands",
    "url": "/posts/useful-npm-commands/",
    "categories": "Lists",
    "tags": "npm, nodejs",
    "date": "2022-02-19 11:33:00 +0800",
    





    "snippet": "NPM (Node Package Manager) is an essential tool for anyone developing with JavaScript. So in this post I will list some useful commands when using NPM.Starting a projectWe can start a project by running npm init.We can also do npm init -y if we want a default package.json.Searching packagesYou can fetch NPM packages in two ways. The first way is by directly accessing the NPM website. The second way is using the NPM CLI:npm search &amp;lt;package&amp;gt;Installing packagesA very important NPM command is install. It allows us to add dependencies to our project.Some use cases:npm install   # install the packages specified in package.jsonnpm install package   # install a packagenpm install package@4.0.1   # install a specific versionnpm install package@latest   # install the latest versionnpm install package -D   # install as development dependencynpm install -g package   # install package globallyUninstalling packagesWe can uninstall a package using uninstall:npm uninstall packageUpdating packagesWe can update packages using update:npm update // update packagesnpm update package // update a specific packageWe can still list outdated packages by doing:npm outdatedOther useful NPM commandsSome other commands that can be useful when we are working with NPM:npm login   # log innpm logout   # log outnpm whoami   # display logged in usernpm publish   # publish a package"
  }
  
]

